[{"/home/divum/prahlad-projects/learning/JWT/client/src/App.tsx":"1","/home/divum/prahlad-projects/learning/JWT/client/src/redux/reducers/index.ts":"2","/home/divum/prahlad-projects/learning/JWT/client/src/pages/Header/Header.tsx":"3","/home/divum/prahlad-projects/learning/JWT/client/src/redux/actions/carts.ts":"4","/home/divum/prahlad-projects/learning/JWT/client/src/pages/Items/ItemsList.tsx":"5","/home/divum/prahlad-projects/learning/JWT/client/src/redux/types/cart.ts":"6","/home/divum/prahlad-projects/learning/JWT/client/src/components/Breadcrumb/Breadcrumb.tsx":"7","/home/divum/prahlad-projects/learning/project/shopping-site-client-v2/src/index.tsx":"8","/home/divum/prahlad-projects/learning/project/shopping-site-client-v2/src/App.tsx":"9","/home/divum/prahlad-projects/learning/project/shopping-site-client-v2/src/redux/reducers/index.ts":"10","/home/divum/prahlad-projects/learning/project/shopping-site-client-v2/src/pages/Header/Header.tsx":"11","/home/divum/prahlad-projects/learning/project/shopping-site-client-v2/src/redux/actions/carts.ts":"12","/home/divum/prahlad-projects/learning/project/shopping-site-client-v2/src/pages/Items/ItemsList.tsx":"13","/home/divum/prahlad-projects/learning/project/shopping-site-client-v2/src/redux/types/cart.ts":"14","/home/divum/prahlad-projects/learning/project/shopping-site-client-v2/src/components/Breadcrumb/Breadcrumb.tsx":"15","/home/divum/prahlad-projects/learning/project/shopping-site-client-v2/src/generated/graphql.tsx":"16","/home/divum/prahlad-projects/learning/project/shopping-site-client-v2/src/util/index.ts":"17","/home/divum/prahlad-projects/learning/project/shopping-site-client-v2/src/pages/Home/Home.tsx":"18","/home/divum/prahlad-projects/learning/project/shopping-site-client-v2/src/pages/Items/ItemDetails.tsx":"19","/home/divum/prahlad-projects/learning/project/shopping-site-client-v2/src/components/CustomCard/CustomCard.tsx":"20","/home/divum/prahlad-projects/learning/project/shopping-site-client-v2/src/components/ItemView/ItemView.tsx":"21","/home/divum/prahlad-projects/learning/project/shopping-site-client-v2/src/components/ListView/ListView.tsx":"22","/home/divum/prahlad-projects/learning/project/shopping-site-client-v2/src/accessToken.ts":"23","/home/divum/prahlad-projects/learning/project/shopping-site-client-v2/src/pages/Login/Login.tsx":"24","/home/divum/prahlad-projects/learning/project/shopping-site-client-v2/src/redux/reducers/cartReducer.ts":"25","/home/divum/prahlad-projects/learning/project/shopping-site-client-v2/src/pages/Cart/Cart.tsx":"26","/home/divum/prahlad-projects/learning/project/shopping-site-client-v2/src/constants/AppConstanat.ts":"27","/home/divum/prahlad-projects/learning/project/shopping-site-client-v2/src/pages/Items/Items.tsx":"28","/home/divum/prahlad-projects/learning/project/shopping-site-client-v2/src/pages/Register/Register.tsx":"29","/home/divum/prahlad-projects/learning/project/shopping-site-client-v2/src/redux/store/index.tsx":"30","/home/divum/prahlad-projects/learning/project/shopping-site-client-v2/src/pages/Items/ALlitem.tsx":"31","/home/divum/prahlad-projects/learning/project/shopping-site-client-v2/src/pages/Bye.tsx":"32","/home/divum/prahlad-projects/learning/project/shopping-site-client-v2/src/components/CartItemView/CartItemView.tsx":"33"},{"size":748,"mtime":1613900838000,"results":"34","hashOfConfig":"35"},{"size":211,"mtime":1612121200000,"results":"36","hashOfConfig":"35"},{"size":10748,"mtime":1613337895000,"results":"37","hashOfConfig":"35"},{"size":499,"mtime":1612120493000,"results":"38","hashOfConfig":"35"},{"size":18977,"mtime":1613513635000,"results":"39","hashOfConfig":"35"},{"size":488,"mtime":1612096562000,"results":"40","hashOfConfig":"35"},{"size":1523,"mtime":1613332721000,"results":"41","hashOfConfig":"35"},{"size":2584,"mtime":1613316576000,"results":"42","hashOfConfig":"43"},{"size":748,"mtime":1613900838000,"results":"44","hashOfConfig":"43"},{"size":211,"mtime":1612121200000,"results":"45","hashOfConfig":"43"},{"size":9626,"mtime":1614618496581,"results":"46","hashOfConfig":"43"},{"size":499,"mtime":1612120493000,"results":"47","hashOfConfig":"43"},{"size":13726,"mtime":1616276335546,"results":"48","hashOfConfig":"43"},{"size":488,"mtime":1612096562000,"results":"49","hashOfConfig":"43"},{"size":1523,"mtime":1613332721000,"results":"50","hashOfConfig":"43"},{"size":59646,"mtime":1616794438629,"results":"51","hashOfConfig":"43"},{"size":451,"mtime":1613335410000,"results":"52","hashOfConfig":"43"},{"size":5392,"mtime":1616234669107,"results":"53","hashOfConfig":"43"},{"size":13619,"mtime":1616344441305,"results":"54","hashOfConfig":"43"},{"size":2407,"mtime":1614544039361,"results":"55","hashOfConfig":"43"},{"size":2563,"mtime":1616274649449,"results":"56","hashOfConfig":"43"},{"size":2045,"mtime":1616794831045,"results":"57","hashOfConfig":"43"},{"size":292,"mtime":1612090362000,"results":"58","hashOfConfig":"43"},{"size":4569,"mtime":1613898667000,"results":"59","hashOfConfig":"43"},{"size":630,"mtime":1612121416000,"results":"60","hashOfConfig":"43"},{"size":6227,"mtime":1616532790501,"results":"61","hashOfConfig":"43"},{"size":389,"mtime":1616265741675,"results":"62","hashOfConfig":"43"},{"size":736,"mtime":1613228112000,"results":"63","hashOfConfig":"43"},{"size":5591,"mtime":1613898709000,"results":"64","hashOfConfig":"43"},{"size":227,"mtime":1612119901000,"results":"65","hashOfConfig":"43"},{"size":1234,"mtime":1616794641118,"results":"66","hashOfConfig":"43"},{"size":519,"mtime":1611479125000,"results":"67","hashOfConfig":"43"},{"size":12530,"mtime":1616532278050,"results":"68","hashOfConfig":"43"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1v5wfed",{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"d56lih",{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"93"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"93"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"113"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"113"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"116"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"116"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"116"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"93"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"113"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"148","messages":"149","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"116"},"/home/divum/prahlad-projects/learning/JWT/client/src/App.tsx",[],"/home/divum/prahlad-projects/learning/JWT/client/src/redux/reducers/index.ts",[],"/home/divum/prahlad-projects/learning/JWT/client/src/pages/Header/Header.tsx",["151","152","153","154"],"/home/divum/prahlad-projects/learning/JWT/client/src/redux/actions/carts.ts",[],"/home/divum/prahlad-projects/learning/JWT/client/src/pages/Items/ItemsList.tsx",["155","156","157","158"],"/home/divum/prahlad-projects/learning/JWT/client/src/redux/types/cart.ts",[],"/home/divum/prahlad-projects/learning/JWT/client/src/components/Breadcrumb/Breadcrumb.tsx",[],"/home/divum/prahlad-projects/learning/project/shopping-site-client-v2/src/index.tsx",[],"/home/divum/prahlad-projects/learning/project/shopping-site-client-v2/src/App.tsx",[],["159","160"],"/home/divum/prahlad-projects/learning/project/shopping-site-client-v2/src/redux/reducers/index.ts",[],"/home/divum/prahlad-projects/learning/project/shopping-site-client-v2/src/pages/Header/Header.tsx",["161","162"],"import React, { useEffect, useState } from 'react';\nimport { Avatar, Dropdown, Drawer, message, Menu, Row, Col, Input, Button } from 'antd';\nimport './index.scss';\nimport \"antd/dist/antd.css\";\nimport { UserOutlined, NotificationOutlined, StarOutlined, SearchOutlined, MenuOutlined, ArrowLeftOutlined } from '@ant-design/icons';\nimport { setAccessToken } from 'src/accessToken';\nimport { useGetAllCategoryAndSubCategoryNameQuery, useLogoutUserMutation, useUserDetailsQuery } from 'src/generated/graphql';\nimport { Link, useHistory, useLocation } from 'react-router-dom';\nimport { getHeaderText } from 'src/util';\n\ninterface HeaderProps {\n}\n\ninterface MenuClickEventHandlerProps {\n    key: React.Key;\n    keyPath: React.Key[];\n    item: React.ReactInstance;\n    domEvent: React.MouseEvent<HTMLElement>;\n}\n\nexport const Header: React.FC<HeaderProps> = () => {\n    const { data: userData, loading: userLoading } = useUserDetailsQuery()\n    const [logoutUser, { client }] = useLogoutUserMutation()\n    const [isVisible, setVisible] = useState<boolean | undefined>(false);\n    const history = useHistory();\n    const { pathname } = useLocation();\n    const rootSubmenuKeys: string[] = ['1', '2', '3'];\n    const [drawerOpenKeys, setdrawerOpenKeys] = useState<string[]>([]);\n    const { data: categoryData, loading: categoryLoading } = useGetAllCategoryAndSubCategoryNameQuery();\n\n    // const [currentWindow, setCurrentWindow] = useState(window.innerWidth);\n\n    // useEffect(() => {\n    //     window.addEventListener(\"resize\", (ev) => {\n    //         setCurrentWindow(window.innerWidth)\n    //     })\n    // }, []);\n\n    if (userLoading || categoryLoading) {\n        return <></>\n    }\n    console.log(categoryData)\n    const showDrawer = (event: React.MouseEvent<HTMLSpanElement, MouseEvent>): void => {\n        setVisible(true);\n    };\n\n    const onClose = (e?: React.KeyboardEvent<HTMLDivElement> | React.MouseEvent<HTMLDivElement | HTMLButtonElement>): void => {\n        setVisible(false);\n    };\n\n    const logOutUser = (e: any) => {\n        return logoutUser().then(res => {\n            setAccessToken('');\n            client.resetStore();\n            history.push('./');\n        })\n    }\n\n    const handleOpenChange = (keys: any): void => {\n        const latestOpenKey: string = keys.find((key: string) => drawerOpenKeys.indexOf(key) === -1);\n        if (rootSubmenuKeys.indexOf(latestOpenKey) === -1) {\n            setdrawerOpenKeys(keys);\n        } else {\n            setdrawerOpenKeys(latestOpenKey ? [latestOpenKey] : []);\n        }\n    };\n\n    const onDrawerOptionClick = (key: MenuClickEventHandlerProps): void => {\n        onClick(key)\n        onClose()\n    }\n\n    const onClick = (key: MenuClickEventHandlerProps): void => {\n        history.push(`/items/${key.key}`)\n    };\n\n    const onClickCart = (event: React.MouseEvent<HTMLSpanElement, MouseEvent>): void => {\n        history.push('/cart')\n    }\n\n    const onSearch = (value: string, event?: React.ChangeEvent<HTMLInputElement> | React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLInputElement>): void => {\n        console.log(value)\n    }\n    const onClickNotification = (event: React.MouseEvent<HTMLSpanElement, MouseEvent>): void => {\n        console.log('onClickNotification')\n    }\n\n    const drawerTitile = <>\n        <div className=\"header-drawer-title\">\n            Profile\n        </div>\n    </>;\n\n    let userMenuOption: any = null;\n\n    if (!userData || !userData.getUserDetails) {\n        userMenuOption = <>\n            <Menu.Item key=\"login\" ><Link to=\"/login\">Log in</Link></Menu.Item>\n            <Menu.Item key=\"signin\"><Link to=\"/register\">register</Link></Menu.Item>\n        </>;\n    } else {\n        userMenuOption = <>\n            <Menu.Item key=\"login\" >{userData.getUserDetails.email}</Menu.Item>\n            <Menu.Item key=\"Casuals\">Profile</Menu.Item>\n            <Menu.Item key=\"logout\"><Button style={{ width: \"100%\" }} onClick={e => logOutUser(e)}>log out</Button></Menu.Item>\n        </>;\n    }\n\n    let menuOption: JSX.Element[] | null = null;\n\n    if (!categoryData || !categoryData.getAllCategoryAndSubCategoryName) {\n        //use default menu\n    } else {\n        // let categories: JSX.Element[] = [];\n        // categoryData.getAllCategoryAndSubCategoryName.forEach((element, index) => {\n        //     let subCategories: JSX.Element[] = []\n        //     element.subCategory.forEach(ele => {\n        //         subCategories.push(<Menu.Item key={ele}>{ele}</Menu.Item>)\n        //     })\n        //     categories.push(<Menu.SubMenu key={index} title={element.category}>{subCategories}</Menu.SubMenu>)\n        // })\n        // menuOption = categories\n        menuOption = categoryData.getAllCategoryAndSubCategoryName.map((element, index) => {\n            return <Menu.SubMenu key={index} title={element.category}>{element.subCategory.map(ele => {\n                return <Menu.Item key={ele}>{ele}</Menu.Item>\n            })}</Menu.SubMenu>\n        })\n    }\n\n\n    const handleBack = (): void => {\n        history.goBack();\n    }\n    const headerIcon: JSX.Element = pathname === '/' ? <MenuOutlined onClick={showDrawer} /> : <ArrowLeftOutlined onClick={handleBack} />\n    const headerText: string = getHeaderText(pathname);\n\n    return (\n        <>\n            <Row className=\"header\" align=\"middle\">\n                <Col className=\"gutter-row\" xs={{ span: 10, offset: 0 }} sm={{ span: 16, offset: 2 }} md={{ span: 12, offset: 2 }} lg={{ span: 10, offset: 2 }} xl={{ span: 10, offset: 2 }} xxl={{ span: 9, offset: 2 }} >\n                    <Row>\n                        <Col xs={{ span: 3, offset: 3 }} sm={{ span: 0, offset: 0 }} md={{ span: 0, offset: 0 }} lg={{ span: 0, offset: 0 }} xl={{ span: 0, offset: 0 }} xxl={{ span: 0, offset: 0 }}>\n                            {headerIcon}\n                        </Col>\n                        <Col xs={{ span: 12, offset: 2 }} sm={{ span: 0, offset: 0 }} md={{ span: 0, offset: 0 }} lg={{ span: 0, offset: 0 }} xl={{ span: 0, offset: 0 }} xxl={{ span: 0, offset: 0 }}>\n                            <span>{headerText}</span>\n                        </Col>\n                        <Col xs={{ span: 0, offset: 2 }} sm={{ span: 4, offset: 0 }} md={{ span: 4, offset: 0 }} lg={{ span: 4, offset: 0 }} xl={{ span: 4, offset: 0 }} xxl={{ span: 6, offset: 0 }}>\n                            <span>Fashion</span>\n                        </Col>\n                        <Col xs={{ span: 0, offset: 0 }} sm={{ span: 20, offset: 0 }} md={{ span: 20, offset: 0 }} lg={{ span: 20, offset: 0 }} xl={{ span: 20, offset: 0 }} xxl={{ span: 18, offset: 0 }}>\n                            <Menu style={{ background: 'transparent', border: 0, lineHeight: '24px' }} mode=\"horizontal\" onClick={onClick}>{menuOption}</Menu>\n                        </Col>\n                    </Row>\n                </Col>\n                <Col className=\"gutter-row header-search-box\" xs={{ span: 0, offset: 0 }} sm={{ span: 0, offset: 0 }} md={{ span: 4, offset: 0 }} lg={{ span: 6, offset: 1 }} xl={{ span: 6, offset: 1 }} xxl={{ span: 8, offset: 1 }}>\n                    <Input.Search allowClear placeholder=\"Search\" onSearch={onSearch} />\n                </Col>\n                <Col className=\"gutter-row\" xs={{ span: 10, offset: 4 }} sm={{ span: 4, offset: 0 }} md={{ span: 4, offset: 1 }} lg={{ span: 4, offset: 1 }} xl={{ span: 4, offset: 1 }} xxl={{ span: 3, offset: 1 }} >\n                    <Row>\n                        <Col xs={{ span: 6, offset: 5 }} sm={{ span: 6, offset: 0 }} md={{ span: 0, offset: 0 }} lg={{ span: 0, offset: 0 }} xl={{ span: 0, offset: 0 }} xxl={{ span: 0, offset: 0 }} >\n                            <Avatar shape=\"square\" className=\"header-icon\" icon={<SearchOutlined onClick={onClickNotification} />} />\n\n                        </Col>\n                        <Col xs={{ span: 0, offset: 0 }} sm={{ span: 0, offset: 0 }} md={{ span: 6, offset: 2 }} lg={{ span: 4, offset: 2 }} xl={{ span: 4, offset: 3 }} xxl={{ span: 4, offset: 2 }} >\n                            <Dropdown placement=\"bottomCenter\" overlay={<Menu style={{ width: '200px' }} >{userMenuOption}</Menu>}>\n                                <Avatar shape=\"circle\" className=\"header-icon\" icon={<UserOutlined />} />\n                            </Dropdown>\n                        </Col>\n                        <Col xs={{ span: 6, offset: 0 }} sm={{ span: 6, offset: 3 }} md={{ span: 6, offset: 2 }} lg={{ span: 4, offset: 2 }} xl={{ span: 4, offset: 3 }} xxl={{ span: 4, offset: 2 }} >\n                            <Avatar shape=\"square\" className=\"header-icon\" icon={<StarOutlined onClick={onClickCart} />} />\n                        </Col>\n                        <Col xs={{ span: 6, offset: 0 }} sm={{ span: 6, offset: 3 }} md={{ span: 6, offset: 2 }} lg={{ span: 4, offset: 2 }} xl={{ span: 4, offset: 4 }} xxl={{ span: 4, offset: 2 }} >\n                            <Avatar shape=\"square\" className=\"header-icon\" icon={<NotificationOutlined onClick={onClickNotification} />} />\n                        </Col>\n                    </Row>\n                </Col>\n            </Row>\n            <Drawer\n                title={drawerTitile}\n                placement={\"left\"}\n                closable={false}\n                onClose={onClose}\n                visible={isVisible}\n                bodyStyle={{ padding: 0 }}\n                headerStyle={{ background: \"lightblue\" }}\n            >\n                <Menu mode=\"inline\" onClick={onDrawerOptionClick} openKeys={drawerOpenKeys} onOpenChange={handleOpenChange} >\n                    {menuOption}\n                </Menu>\n            </Drawer>\n        </>\n    );\n};",["163","164"],"/home/divum/prahlad-projects/learning/project/shopping-site-client-v2/src/redux/actions/carts.ts",[],["165","166"],"/home/divum/prahlad-projects/learning/project/shopping-site-client-v2/src/pages/Items/ItemsList.tsx",["167"],"import { Col, Layout, PageHeader, Row, Checkbox, Divider, Affix, Drawer, Select, List } from 'antd';\nimport { CheckboxValueType } from 'antd/lib/checkbox/Group';\nimport React, { useState } from 'react';\n\nimport { useParams, useHistory, useLocation } from 'react-router-dom';\nimport { NavBreadcrumb } from 'src/components/Breadcrumb/Breadcrumb';\nimport { CheckCircleTwoTone } from '@ant-design/icons';\n\nimport './index.scss';\nimport { valueType } from 'antd/lib/statistic/utils';\nimport { useGetAllItemIdsBySubCategoryWithFilterQuery } from 'src/generated/graphql';\nimport { ItemView } from 'src/components/ItemView/ItemView';\nimport { SORT_OPTIONS } from '../../constants/AppConstanat'\n\ninterface ItemsListRouterProps {\n    category: string\n}\n\nexport const ItemsList: React.FC<ItemsListRouterProps> = ({ }) => {\n    const history = useHistory();\n    const { pathname } = useLocation();\n    const subCategory = pathname.split('/')[2]\n    const [filterColor, setFilterColor] = useState<Array<string | number | boolean>>([]);\n    const [filterCategory, setFilterCategory] = useState<Array<string | number | boolean>>([]);\n    const [filterDiscount, setFilterDiscount] = useState<Array<string | number | boolean>>([]);\n    const [filterPrice, setFilterPrice] = useState<Array<string | number | boolean>>([]);\n    const [isVisible, setVisible] = useState<boolean | undefined>(false);\n    const [drawerType, setDrawerType] = useState<string>('');\n    const [sortBy, setSortBy] = useState<valueType>(0);\n    const { category } = useParams<ItemsListRouterProps>();\n    let fillterOption = {\n        sort: SORT_OPTIONS[sortBy].key,\n        color: [],\n        price: [],\n        category: [],\n        discount: []\n    }\n    const { data: allitemIds, loading: itemIdsLoader, error: itemIdsError } = useGetAllItemIdsBySubCategoryWithFilterQuery({ variables: { subCategory, filterOptions: fillterOption } })\n\n    if (itemIdsError) {\n        history.replace('/items')\n    }\n\n    if (itemIdsLoader || !allitemIds) {\n        return <>Loading data..............</>\n    }\n\n    const plainOptions = ['Printed', 'Checks', 'Damge'];\n    const categoryOptions = plainOptions.map((item) => {\n        return <><Checkbox value={item}>{item}</Checkbox><br /> </>\n    })\n    const onChange = (checkedValue: CheckboxValueType[], type?: string): void => {\n        console.log('checked = ', type, checkedValue);\n        if (type === 'color') {\n            setFilterColor(checkedValue)\n        } else if (type === 'category') {\n            setFilterCategory(checkedValue)\n        } else if (type === 'discount') {\n            setFilterDiscount(checkedValue)\n        } else {\n            setFilterPrice(checkedValue)\n        }\n    }\n\n    const pricePlainOptions = [\"Rs. 134 to Rs. 3051\", \"Rs. 3051 to Rs. 5968\", \"Rs. 5968 to Rs. 8885\", \"Rs. 8885 to Rs. 11802\"];\n    const priceOptions = pricePlainOptions.map((item, index) => {\n        return <><Checkbox value={index} >{item}</Checkbox><br /> </>\n    });\n\n    const colorPlainOptions = [\n        \"AliceBlue\",\n        \"AntiqueWhite\",\n        \"Aqua\",\n        \"Aquamarine\",\n        \"Azure\",\n        \"Beige\",\n        \"Bisque\",\n        \"Black\",\n        \"BlanchedAlmond\",\n        \"Blue\",\n        \"BlueViolet\",\n        \"Brown\",\n        \"BurlyWood\",\n        \"CadetBlue\",\n        \"Chartreuse\",\n        \"Chocolate\",\n        \"Coral\",\n        \"CornflowerBlue\",\n        \"Cornsilk\",\n        \"Crimson\",\n        \"Cyan\",\n        \"DarkBlue\",\n        \"DarkCyan\",\n        \"DarkGoldenRod\",\n        \"DarkGray\",\n        \"DarkGrey\",\n        \"DarkGreen\",\n        \"DarkKhaki\",\n        \"DarkMagenta\",\n        \"DarkOliveGreen\",\n        \"DarkOrange\",\n        \"DarkOrchid\",\n        \"DarkRed\",\n        \"DarkSlateBlue\",\n        \"DarkSlateGray\",\n        \"DarkSlateGrey\",\n        \"DarkTurquoise\",\n        \"DarkViolet\",\n        \"DeepPink\",\n        \"DeepSkyBlue\",\n        \"DimGray\",\n        \"DimGrey\",\n        \"DodgerBlue\",\n        \"FireBrick\",\n        \"FloralWhite\",\n        \"ForestGreen\",\n        \"Fuchsia\",\n        \"Gainsboro\",\n        \"GhostWhite\",\n        \"Gold\",\n        \"GoldenRod\",\n        \"Gray\",\n        \"Grey\",\n        \"Green\",\n        \"GreenYellow\",\n        \"HoneyDew\",\n        \"HotPink\",\n        \"IndianRed\",\n        \"Indigo\",\n        \"Ivory\",\n        \"MediumSeaGreen\",\n        \"MediumSlateBlue\",\n        \"MediumTurquoise\",\n        \"MediumVioletRed\",\n        \"MidnightBlue\",\n        \"MintCream\",\n        \"MistyRose\",\n        \"Moccasin\",\n        \"NavajoWhite\",\n        \"Navy\",\n        \"OldLace\",\n        \"Olive\",\n        \"OliveDrab\",\n        \"Orange\",\n        \"OrangeRed\",\n        \"Orchid\",\n        \"PaleGoldenRod\",\n        \"PaleGreen\",\n        \"PaleTurquoise\",\n        \"PaleVioletRed\",\n        \"PapayaWhip\",\n        \"SeaShell\",\n        \"Sienna\",\n        \"Silver\",\n        \"SkyBlue\",\n        \"SlateBlue\",\n        \"SlateGray\",\n        \"SlateGrey\",\n        \"Snow\",\n        \"WhiteSmoke\",\n        \"Yellow\",\n        \"YellowGreen\",\n    ];\n    const colorOptions = colorPlainOptions.map((item, index) => {\n        return <><Checkbox value={item}><span className=\"label-color\" style={{ backgroundColor: item }}></span>{item}</Checkbox><br /> </>\n    });\n    const discountPlanOption = [\n        \"10 % and above\",\n        \"20 % and above\",\n        \"30 % and above\",\n        \"40 % and above\",\n        \"50 % and above\",\n        \"60 % and above\",\n        \"70 % and above\",\n        \"80 % and above\"\n    ]\n    const discountOptions = discountPlanOption.map((item, index) => {\n        return <><Checkbox value={index}>{item}</Checkbox><br /> </>\n    });\n\n    const resetFilters = (e: React.MouseEvent<HTMLButtonElement, MouseEvent>): void => {\n        setFilterColor([]);\n        setFilterCategory([]);\n        setFilterDiscount([]); // state contains index of discountPlanOption\n        setFilterPrice([]);// state contains index of pricePlainOptions\n    }\n    const isClearOption = (filterColor.length === 0 && filterCategory.length === 0 && filterDiscount.length === 0 && filterPrice.length === 0) ? false : true\n\n    const filterHeader: JSX.Element = <div style={{ display: 'flex', flexDirection: \"row\", justifyContent: 'space-between' }}>\n        <text>\n            FILTERS\n            </text>\n        {isClearOption && <button style={{ border: 0, background: \"transparent\", outline: 'none' }} onClick={resetFilters}>Clear All</button>}\n    </div>\n\n    const filterOptions: JSX.Element = <>\n        <div className=\"item-listing-layout-sider-content-category\" >\n            <text>\n                CATEGORIES\n            </text>\n            <div className=\"item-listing-layout-sider-content-category-options\">\n                <Checkbox.Group value={filterCategory} onChange={e => { onChange(e, 'category') }} >\n                    {categoryOptions}\n                </Checkbox.Group>\n            </div>\n        </div>\n        <Divider />\n        <div className=\"item-listing-layout-sider-content-price\" >\n            <text>\n                PRICE\n                            </text>\n            <div className=\"item-listing-layout-sider-content-price-options\">\n                <Checkbox.Group value={filterPrice} onChange={e => { onChange(e, 'price') }} >\n                    {priceOptions}\n                </Checkbox.Group>\n            </div>\n        </div>\n        <Divider />\n        <div className=\"item-listing-layout-sider-content-color\" >\n            <text>\n                COLOR\n                            </text>\n            <div className=\"item-listing-layout-sider-content-color-options\">\n                <Checkbox.Group value={filterColor} onChange={e => { onChange(e, 'color') }} >\n                    {colorOptions}\n                </Checkbox.Group>\n            </div>\n        </div>\n        <Divider />\n        <div className=\"item-listing-layout-sider-content-discount\" >\n            <text>\n                DISCOUNT RANGE\n                            </text>\n            <div className=\"item-listing-layout-sider-content-discount-options\">\n                <Checkbox.Group value={filterDiscount} onChange={e => { onChange(e, 'discount') }} >\n                    {discountOptions}\n                </Checkbox.Group>\n            </div>\n        </div>\n    </>;\n    const showDrawer = (event: React.MouseEvent<HTMLSpanElement, MouseEvent>, type: string): void => {\n        setDrawerType(type)\n        setVisible(true);\n    };\n\n    const onClose = (e?: React.KeyboardEvent<HTMLDivElement> | React.MouseEvent<HTMLDivElement | HTMLButtonElement>): void => {\n        setVisible(false);\n    };\n\n    const handleChange = (value: valueType): void => {\n        console.log(value)\n        if (sortBy === value) {\n            return\n        }\n        setSortBy(value)\n        if (drawerType === 'sort') {\n            onClose();\n        }\n    }\n\n    const sortOptions: JSX.Element = <>\n        <text>\n            SORT BY :\n        </text>\n        <Select value={sortBy} style={{ width: 200 }} onChange={handleChange}>\n            {\n                SORT_OPTIONS.map((item, index) => {\n                    return <Select.Option value={index}>{item.label}</Select.Option>\n                })\n            }\n        </Select>\n    </>\n\n    const drawerHeader: JSX.Element | string = drawerType === 'sort' ? \"SORT BY\" : filterHeader\n    const drawerContent: JSX.Element =\n        drawerType === 'sort' ?\n            <List\n                bordered\n                dataSource={SORT_OPTIONS}\n                renderItem={(item, index) => (\n                    <List.Item onClick={e => { handleChange(index) }}>\n                        {item.label}\n                        {sortBy === index &&\n                            <div style={{\n                                float: \"right\",\n                                textAlign: 'right'\n                            }}>\n                                <CheckCircleTwoTone twoToneColor=\"#52c41a\" />\n                            </div>\n                        }\n                    </List.Item>\n                )}\n            />\n            :\n            <div className=\"item-listing-layout-sider-content\" style={{ padding: '10px 20px' }}>\n                {filterOptions}\n            </div>\n\n    return (\n        <div className=\"item-listing\">\n            <div className=\"item-listing-breadcrumb\" >\n                <NavBreadcrumb />\n            </div>\n            <Layout className=\"item-listing-layout\">\n                <Layout.Sider className=\"item-listing-layout-sider\" width={'15rem'}>\n                    <div className=\"item-listing-layout-sider-content\" style={{ padding: '10px 20px' }}>\n                        {filterHeader}\n                        <Divider />\n                        {filterOptions}\n                    </div>\n                </Layout.Sider>\n                <Layout.Content className=\"item-listing-layout-content\">\n                    <div className=\"item-listing-layout-content-main\">\n                        <PageHeader\n                            className=\"item-listing-layout-content-main-header\"\n                            title={category}\n                            extra={[sortOptions]}\n                        />\n\n                        <div className=\"item-listing-layout-content-main-items\">\n                            <Row style={{ margin: 0 }} gutter={24}>\n                                {/* {tempData.map(item => {\n                                    return <Col xs={12} sm={12} md={8} lg={8} xl={6} xxl={4} >\n                                        <CustomCard\n                                            type={'item-preview'}\n                                            param={item.id}\n                                            handleClick={handleClick}\n                                            onClickStar={handleClickStar}\n                                            hoverable={true}\n                                            styleName=\"preview-card\"\n                                            imageUrl={item.imageUrl}\n                                            title={item.title}\n                                            price={item.price}\n                                            stared={item.stared}\n                                            description={item.description} />\n                                    </Col>\n                                })} */}\n                                {allitemIds.getAllItemIdsBySubCategoryWithFilter.itemIds.map(item => {\n                                    return <Col xs={12} sm={12} md={8} lg={8} xl={6} xxl={4} >\n                                        <ItemView itemId={item} category={category} />\n                                    </Col>\n                                })}\n                            </Row>\n                        </div>\n\n                    </div>\n\n                    <Affix className=\"item-listing-layout-content-footer\" offsetBottom={0} >\n                        <button className=\"item-listing-layout-content-footer-content\" onClick={e => { showDrawer(e, \"sort\") }} >\n                            SORT\n                        </button>\n                        <button className=\"item-listing-layout-content-footer-content\" onClick={e => { showDrawer(e, \"filter\") }}>\n                            FILTER\n                        </button>\n                    </Affix>\n                </Layout.Content>\n            </Layout>\n            <Drawer\n                title={drawerHeader}\n                placement={drawerType === 'sort' ? \"bottom\" : \"right\"}\n                closable={false}\n                onClose={onClose}\n                visible={isVisible}\n                bodyStyle={{ padding: 0 }}\n                headerStyle={{ background: \"lightblue\" }}\n                height={300}\n            >\n                {drawerContent}\n            </Drawer>\n        </div>\n    );\n}","/home/divum/prahlad-projects/learning/project/shopping-site-client-v2/src/redux/types/cart.ts",[],["168","169"],"/home/divum/prahlad-projects/learning/project/shopping-site-client-v2/src/components/Breadcrumb/Breadcrumb.tsx",[],"/home/divum/prahlad-projects/learning/project/shopping-site-client-v2/src/generated/graphql.tsx",[],"/home/divum/prahlad-projects/learning/project/shopping-site-client-v2/src/util/index.ts",[],["170","171"],"/home/divum/prahlad-projects/learning/project/shopping-site-client-v2/src/pages/Home/Home.tsx",["172","173"],"import React from 'react';\nimport \"./index.scss\";\nimport { Carousel, Col, Divider, Row } from 'antd';\nimport { CustomCard } from '../../components/CustomCard/CustomCard';\nimport { RouteComponentProps } from 'react-router-dom';\nimport { useGetAllSubCategoriesWithCategoryQuery, useGetLAtestOffersQuery } from 'src/generated/graphql';\ninterface HomeProps {\n\n}\n\nconst tempData = [\n    { cateogry: \"Jeans\", imageUrl: \"https://os.alipayobjects.com/rmsportal/QBnOOoLaAfKPirc.png\", title: \"Jeans\" },\n    { cateogry: \"jeans-1\", imageUrl: \"https://os.alipayobjects.com/rmsportal/QBnOOoLaAfKPirc.png\", title: \"jeans-1\" },\n    { cateogry: \"jeans-2\", imageUrl: \"https://os.alipayobjects.com/rmsportal/QBnOOoLaAfKPirc.png\", title: \"jeans-2\" },\n    { cateogry: \"jeans-3\", imageUrl: \"https://os.alipayobjects.com/rmsportal/QBnOOoLaAfKPirc.png\", title: \"jeans-3\" },\n    { cateogry: \"jeans-4\", imageUrl: \"https://os.alipayobjects.com/rmsportal/QBnOOoLaAfKPirc.png\", title: \"jeans-4\" },\n    { cateogry: \"jeans-5\", imageUrl: \"https://os.alipayobjects.com/rmsportal/QBnOOoLaAfKPirc.png\", title: \"jeans-5\" },\n    { cateogry: \"jeans-6\", imageUrl: \"https://os.alipayobjects.com/rmsportal/QBnOOoLaAfKPirc.png\", title: \"jeans-6\" },\n    { cateogry: \"jeans-7\", imageUrl: \"https://os.alipayobjects.com/rmsportal/QBnOOoLaAfKPirc.png\", title: \"jeans-7\" },\n    { cateogry: \"jeans-8\", imageUrl: \"https://os.alipayobjects.com/rmsportal/QBnOOoLaAfKPirc.png\", title: \"jeans-8\" },\n    { cateogry: \"jeans-9\", imageUrl: \"https://os.alipayobjects.com/rmsportal/QBnOOoLaAfKPirc.png\", title: \"jeans-9\" },\n    { cateogry: \"jeans-10\", imageUrl: \"https://os.alipayobjects.com/rmsportal/QBnOOoLaAfKPirc.png\", title: \"jeans-10\" },\n    { cateogry: \"jeans-11\", imageUrl: \"https://os.alipayobjects.com/rmsportal/QBnOOoLaAfKPirc.png\", title: \"jeans-11\" }\n]\n\nexport const Home: React.FC<HomeProps & RouteComponentProps> = ({ history }) => {\n    const { data: offers, loading: offerLoading } = useGetLAtestOffersQuery();\n    const { data: categoryData, loading: categoryLoading } = useGetAllSubCategoriesWithCategoryQuery();\n    const handleClick = (event: React.MouseEvent<HTMLDivElement, MouseEvent>, category: string): void => {\n        history.push({ pathname: `./items/${category}` })\n    }\n    if (offers) {\n        console.log(offers)\n    }\n\n    return (\n        <div className=\"homepage\">\n            <Carousel autoplay className=\"homepage-carousel\" >\n                {offerLoading ?\n                    <div>Loading</div>\n                    :\n                    offers?.getLatestOffers.offers.map(item => {\n                        return <div key={item.offerId} className=\"homepage-carousel-item\">\n                            <img src={`${item.image}`} alt={item.title} />\n                        </div>\n                    })\n                }\n\n            </Carousel>\n            {/* <div className=\"homepage-item-brands\">\n                <h1>BIGGEST DEALS ON TOP BRANDS</h1>\n                <div className=\"homepage-item-brands-container\" >\n                    <Row gutter={24} >\n                        {tempData.map(item => {\n                            return <Col key={item.title} xs={12} sm={12} md={8} lg={8} xl={6} xxl={4} >\n                                <CustomCard\n                                    param={item.cateogry}\n                                    handleClick={handleClick}\n                                    hoverable={true}\n                                    styleName=\"cart-category-square\"\n                                    imageUrl={item.imageUrl}\n                                    title={item.title} />\n                            </Col>\n                        })}\n                    </Row>\n                </div>\n            </div>\n            <Divider className=\"homepage-divider\" dashed /> */}\n            <div className=\"homepage-item-categories\">\n                <h1>CATEGORIES TO BAG</h1>\n                <div className=\"homepage-item-categories-container\">\n                    <Row gutter={24} style={{ margin: \"0\" }}>\n                        {categoryLoading ?\n                            <>\n                                loading categories\n                            </>\n                            :\n                            <>\n                                {(categoryData && categoryData.getAllSubCategoriesWithCategory) ?\n                                    categoryData.getAllSubCategoriesWithCategory.map(item => {\n                                        return <Col key={item.subCategory} xs={12} sm={12} md={8} lg={6} xl={4} >\n                                            <CustomCard\n                                                param={item.subCategory}\n                                                handleClick={handleClick}\n                                                hoverable={false}\n                                                styleName=\"cart-category-round\"\n                                                imageUrl={item.image}\n                                                title={item.subCategory} />\n                                        </Col>\n                                    })\n                                    :\n                                    null\n                                }\n                            </>\n                        }\n                    </Row>\n                </div>\n            </div>\n        </div>\n    )\n}",["174","175"],"/home/divum/prahlad-projects/learning/project/shopping-site-client-v2/src/pages/Items/ItemDetails.tsx",[],["176","177"],"/home/divum/prahlad-projects/learning/project/shopping-site-client-v2/src/components/CustomCard/CustomCard.tsx",[],"/home/divum/prahlad-projects/learning/project/shopping-site-client-v2/src/components/ItemView/ItemView.tsx",[],"/home/divum/prahlad-projects/learning/project/shopping-site-client-v2/src/components/ListView/ListView.tsx",[],"/home/divum/prahlad-projects/learning/project/shopping-site-client-v2/src/accessToken.ts",[],"/home/divum/prahlad-projects/learning/project/shopping-site-client-v2/src/pages/Login/Login.tsx",["178"],"import React, { useEffect } from 'react'\nimport { RouteComponentProps } from 'react-router-dom';\nimport { getAccessToken, setAccessToken } from 'src/accessToken';\nimport { useLoginUserMutation, UserDetailsDocument, UserDetailsQuery } from 'src/generated/graphql';\nimport { Form, Input, Button, Card } from 'antd';\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\nimport './index.scss';\n\ninterface loginFormProps {\n    email: string;\n    password: string;\n}\n\nexport const Login: React.FC<RouteComponentProps> = ({ history }) => {\n\n    // check for access token in loacl storage\n    useEffect(() => {\n        const accessToken = getAccessToken();\n        if (accessToken !== '') {\n            history.replace('./');\n        }\n    }, [])\n\n    // mutation for login\n    const [login] = useLoginUserMutation();\n\n    const [form] = Form.useForm();\n\n    // use mutation to check email and password is valid or not (use update to update you apollo clien cache)\n    // if yes set refresh token otherwise show error\n    const onFinish = (values: loginFormProps) => {\n        return login({\n            variables: {\n                email: values.email,\n                password: values.password\n            },\n            update: (store, { data }) => {\n                if (data && data.loginUser.__typename === \"LoginSuccess\") {\n                    store.writeQuery<UserDetailsQuery>({\n                        query: UserDetailsDocument,\n                        data: {\n                            __typename: \"Query\",\n                            getUserDetails: data.loginUser.user\n                        }\n                    })\n                } else {\n                    console.log('unbale to update user cache')\n                }\n            }\n        }).then(res => {\n            if (!res || res.errors || !res.data) {\n                return\n            }\n            if (res.data.loginUser.__typename === \"LoginSuccess\") {\n                //set access token \n                //access token used for protect graphql query/mutations\n                setAccessToken(res.data.loginUser.accessToken);\n\n                //navigate to home\n                history.push(\"/\");\n            }\n            else if (res.data.loginUser.__typename.endsWith(\"Error\")) {\n                // based on error code(1 for email and 2 for password) handle erros\n                // OR can use __typename to handle errors\n                if (res.data.loginUser.errorCode === \"1\") {\n                    return form.setFields([{ name: \"email\", errors: [\"Email not exists!\"] }])\n                }\n                return form.setFields([{ name: \"password\", errors: [\"Password not matched!\"] }])\n            }\n        }).catch(err => {\n            console.log('err', err)\n        })\n\n    }\n\n\n    const signUp = (event: React.MouseEvent<HTMLElement, MouseEvent>): void => {\n        history.push(\"/register\");\n    }\n\n    return (\n        <div className=\"login\">\n            <Card className=\"login-card\">\n                <Form\n                    form={form}\n                    name=\"normal_login\"\n                    className=\"login-form\"\n                    initialValues={{ email: '', password: '' }}\n                    onFinish={onFinish}\n                >\n                    <Form.Item\n                        name=\"email\"\n                        rules={[{ type: 'email', required: true, message: 'Please input your Email!' }]}\n                    >\n                        <Input placeholder=\"Email\" prefix={<UserOutlined className=\"site-form-item-icon\" />} />\n                    </Form.Item>\n\n                    <Form.Item\n                        name=\"password\"\n                        rules={[{ required: true, message: 'Please input your Password!' }]}\n                    >\n                        <Input\n                            prefix={<LockOutlined className=\"site-form-item-icon\" />}\n                            type=\"password\"\n                            placeholder=\"Password\"\n                        />\n                    </Form.Item>\n\n                    <Form.Item>\n                        <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\n                            Log in\n                        </Button>\n                    </Form.Item>\n                    <Form.Item>\n                        <Button type=\"dashed\" className=\"login-form-button\" onClick={signUp}>\n                            Sign up\n                        </Button>\n                    </Form.Item>\n                </Form>\n            </Card>\n        </div>\n    );\n} ","/home/divum/prahlad-projects/learning/project/shopping-site-client-v2/src/redux/reducers/cartReducer.ts",[],"/home/divum/prahlad-projects/learning/project/shopping-site-client-v2/src/pages/Cart/Cart.tsx",["179"],"import { Button, Card, Col, Divider, Row, Skeleton } from 'antd';\nimport React from 'react';\nimport { CartItemView } from 'src/components/CartItemView/CartItemView';\nimport { useGetCartDetailsQuery } from 'src/generated/graphql';\nimport './index.scss';\ninterface CartProps {\n\n}\n\nexport const Cart: React.FC<CartProps> = ({ }) => {\n    const { data: cartData, loading, error } = useGetCartDetailsQuery({ fetchPolicy: 'network-only' });\n\n    if (error) {\n        //navigate to home\n        console.log(error);\n    }\n\n    console.log(cartData);\n    if (loading || !cartData?.getCartDetails) {\n        return <Skeleton />\n    }\n\n    let priceDetails = cartData.getCartDetails.items.reduce(function (accumulator, currentValue) {\n        return {\n            price: Number(accumulator.price) + (Number(currentValue.price) * Number(currentValue.quantity)),\n            priceWithoutDiscount: Number(accumulator.priceWithoutDiscount) + Math.ceil((((Number(currentValue.discount) + 100) * Number(currentValue.price)) * .01) * Number(currentValue.quantity)),\n        }\n    }, { price: 0, priceWithoutDiscount: 0 });\n\n    let totalPayable = priceDetails.price;\n\n    if (priceDetails.price < 500 && cartData.getCartDetails.items.length > 0) {\n        totalPayable += 50;\n    }\n\n    return (\n        <div className=\"cart\">\n            <Row gutter={24}>\n                <Col xs={{ span: 24, offset: 0 }} sm={{ span: 24, offset: 0 }} md={{ span: 24, offset: 0 }} lg={{ span: 16, offset: 0 }} xl={{ span: 16, offset: 0 }} xxl={{ span: 16, offset: 0 }} >\n                    {cartData.getCartDetails.items.map((ele, index) => {\n                        return <CartItemView cartId={cartData.getCartDetails.cartId} itemId={ele.itemId} size={ele.size} quantity={ele.quantity} />\n                    })}\n                </Col>\n                <Col xs={{ span: 24, offset: 0 }} sm={{ span: 24, offset: 0 }} md={{ span: 24, offset: 0 }} lg={{ span: 8, offset: 0 }} xl={{ span: 8, offset: 0 }} xxl={{ span: 8, offset: 0 }}>\n                    <Card\n                        className=\"cart-info\"\n                        style={{ marginTop: 16 }}\n                    >\n                        <div className='cart-info-content'>\n                            <h3>\n                                PRICE DETAILS ({cartData.getCartDetails.count} Items)\n                            </h3>\n                            <Divider />\n                            <div className=\"cart-info-content-priceDetails\">\n                                <p>\n                                    <span className=\"cart-info-content-priceDetails-left\">\n                                        Total MRP\n                                  </span>\n                                    <span className=\"cart-info-content-priceDetails-right\">\n                                        &#8377; {priceDetails.priceWithoutDiscount}\n                                    </span>\n                                </p>\n                                <p>\n                                    <span className=\"cart-info-content-priceDetails-left\">\n                                        Dicount on MRP\n                                  </span>\n                                    <span className=\"cart-info-content-priceDetails-right color-green\">\n                                        - &#8377; {priceDetails.priceWithoutDiscount - priceDetails.price}\n                                    </span>\n                                </p>\n                                <p>\n                                    <span className=\"cart-info-content-priceDetails-left\">\n                                        Coupon Discount\n                                  </span>\n                                    <span className=\"cart-info-content-priceDetails-right\">\n                                        &#8377; 0\n                                  </span>\n                                </p>\n                                {\n                                    cartData.getCartDetails.items.length > 0 &&\n                                    <p>\n                                        <span className=\"cart-info-content-priceDetails-left\">\n                                            Conevnience Fee\n                                        </span>\n                                        <span className=\"cart-info-content-priceDetails-right\">\n                                            {priceDetails.price >= 500 ?\n                                                <>\n                                                    <span className=\"cart-info-content-priceDetails-right-line\">\n                                                        <span>&#8377; 50</span>\n                                                    </span>\n                                                    <span className=\"color-green\">\n                                                        FREE\n                                             </span>\n                                                </>\n                                                :\n                                                <span>&#8377; 50</span>}\n                                        </span>\n                                    </p>\n\n                                }\n                            </div>\n                            <Divider />\n                            <div className=\"cart-info-content-priceTotal\">\n                                <h3>\n                                    <span>\n                                        Total Amount\n                                    </span>\n                                    <span className=\"cart-info-content-priceTotal-right\">\n                                        &#8377; {totalPayable}\n                                    </span>\n                                </h3>\n                            </div>\n                        </div>\n                        <div className=\"cart-info-footer\">\n                            <Button disabled={totalPayable === 0 ? true : false} type=\"primary\">\n                                Place Order\n                            </Button>\n                        </div>\n                    </Card>\n                </Col>\n            </Row>\n        </div>\n    );\n}","/home/divum/prahlad-projects/learning/project/shopping-site-client-v2/src/constants/AppConstanat.ts",[],"/home/divum/prahlad-projects/learning/project/shopping-site-client-v2/src/pages/Items/Items.tsx",["180","181","182","183"],"import React, { useEffect, useState } from 'react';\nimport { Redirect, Route, Switch, useRouteMatch } from 'react-router-dom';\nimport { ALlitem } from './ALlitem';\nimport { ItemDetails } from './ItemDetails';\nimport { ItemsList } from './ItemsList';\n\ninterface ItemsProps {\n\n}\n\nexport const Items: React.FC<ItemsProps> = ({ }) => {\n    const { path, url } = useRouteMatch();\n    return (\n        <Switch>\n            <Route exact path={`${path}/default`} component={ALlitem} />\n            <Route exact path={`${path}/:category/:id`} component={ItemDetails} />\n            <Route exact path={`${path}/:category`} component={ItemsList} />\n            <Redirect exact from={`${path}/`} to={`${path}/default`} />\n        </Switch>\n    );\n}","/home/divum/prahlad-projects/learning/project/shopping-site-client-v2/src/pages/Register/Register.tsx",["184","185"],"import React, { useEffect, useState } from 'react'\nimport { RouteComponentProps } from 'react-router-dom';\nimport { useRegisterUserMutation } from 'src/generated/graphql';\nimport './index.scss';\nimport { Form, Input, Button, Card, message } from 'antd';\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\nimport { getAccessToken } from 'src/accessToken';\n\n\ninterface RegisterFormProps {\n    email: string,\n    password: string,\n    firstName: string,\n    lastName: string,\n    passwordConfirm: string\n}\n\nexport const Register: React.FC<RouteComponentProps> = ({ history }) => {\n\n    // check for access token in loacl storage\n    // if user has accesstoken, redirect user to home otherwise load the component\n    useEffect(() => {\n        const accessToken = getAccessToken();\n        if (accessToken && accessToken !== '') {\n            history.replace('./');\n        }\n    }, [])\n\n    // mutation to register a user  \n    const [registerUser] = useRegisterUserMutation()\n\n\n    const [form] = Form.useForm()\n\n    // basic validation and call muatation\n    const onFinish = (values: RegisterFormProps) => {\n        if (values.password !== values.passwordConfirm) {\n            message.warn(\"Password doesn't match\")\n            return\n        }\n        return registerUser({\n            variables: {\n                email: values.email,\n                password: values.password,\n                firstName: values.firstName,\n                lastName: values.lastName\n            }\n        }).then(_res => {\n            console.log(_res)\n            if (_res.data?.registerUser.__typename === \"RegisterSuccess\") {\n                // navigate to login\n                history.push(\"/login\");\n            }\n            else if (_res.data?.registerUser.__typename === \"AllreadyExistsError\") {\n                form.setFields([{ name: \"email\", errors: [\"Email alredy exists!\"] }])\n            }\n            else {\n                //handle other errors (based on error code)\n                console.log(_res.data?.registerUser)\n                message.warning('Something went worng')\n            }\n        })\n    };\n\n    // navigate to login\n    const logIn = (event: React.MouseEvent<HTMLElement, MouseEvent>) => {\n        history.push(\"/login\");\n    }\n\n    // custom validator for confirm passwod\n    const confrimPassword = (rule: any, value: any, callback: (error?: string) => void): Promise<void | any> | void => {\n        let { password } = form.getFieldsValue()\n        if (!value || value === password) {\n            callback();\n        }\n        else {\n            callback(\"Password doesn't match!\");\n        }\n    }\n\n    return (\n        <div className=\"register\">\n            <Card className=\"register-card\">\n                <Form\n                    form={form}\n                    name=\"normal_register\"\n                    className=\"register-form\"\n                    initialValues={{ firstName: '', lastName: '', email: '', password: '', passwordConfirm: '' }}\n                    onFinish={onFinish}\n                >\n                    <Form.Item\n                        name=\"firstName\"\n                        rules={[{ type: 'string', required: true, message: 'Please input your First Name!' }]}\n                    >\n                        <Input placeholder=\"First Name\" prefix={<UserOutlined className=\"site-form-item-icon\" />} />\n                    </Form.Item>\n                    <Form.Item\n                        name=\"lastName\"\n                        rules={[{ type: 'string', required: true, message: 'Please input your Last Name!' }]}\n                    >\n                        <Input placeholder=\"Last Name\" prefix={<UserOutlined className=\"site-form-item-icon\" />} />\n                    </Form.Item>\n\n                    <Form.Item\n                        name=\"email\"\n                        rules={[{ type: 'email', required: true, message: 'Please input your Email!' }]}\n                    >\n                        <Input placeholder=\"Email\" prefix={<UserOutlined className=\"site-form-item-icon\" />} />\n                    </Form.Item>\n\n                    <Form.Item\n                        name=\"password\"\n                        rules={[{ required: true, message: 'Please input your Password!' }]}\n                    >\n                        <Input\n                            prefix={<LockOutlined className=\"site-form-item-icon\" />}\n                            type=\"password\"\n                            placeholder=\"Password\"\n                        />\n                    </Form.Item>\n                    <Form.Item\n                        name=\"passwordConfirm\"\n                        rules={[{ required: true, message: \"Please confrim your Password!\" }, { validator: confrimPassword }]}\n                    >\n                        <Input\n                            prefix={<LockOutlined className=\"site-form-item-icon\" />}\n                            type=\"password\"\n                            placeholder=\"Confirm Password\"\n                        />\n                    </Form.Item>\n\n                    <Form.Item>\n                        <Button type=\"primary\" htmlType=\"submit\" className=\"register-form-button\">\n                            Sign up\n                        </Button>\n                    </Form.Item>\n                    <Form.Item>\n                        <Button type=\"dashed\" className=\"register-form-button\" onClick={logIn}>\n                            Log in\n                        </Button>\n                    </Form.Item>\n                </Form>\n            </Card>\n        </div>\n    );\n\n}; ","/home/divum/prahlad-projects/learning/project/shopping-site-client-v2/src/redux/store/index.tsx",[],"/home/divum/prahlad-projects/learning/project/shopping-site-client-v2/src/pages/Items/ALlitem.tsx",["186","187"],"import { Divider } from 'antd';\nimport React from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { NavBreadcrumb } from 'src/components/Breadcrumb/Breadcrumb';\nimport { ListView } from 'src/components/ListView/ListView';\nimport { useAllSubCategoriesWithItemQuery } from 'src/generated/graphql';\n\ninterface ALlitemProps {\n\n}\n\n\nexport const ALlitem: React.FC<ALlitemProps> = ({ }) => {\n    const { data, loading, error } = useAllSubCategoriesWithItemQuery();\n    const history = useHistory();\n    if (error) {\n        history.push({ pathname: '/' });\n    }\n    if (loading || !data || !data.allSubCategoriesWithItem) {\n        return <div>Loading....</div>\n    }\n    return (\n        <div className=\"item-categories\">\n            <div className=\"item-categories-breadcrumb\">\n                <NavBreadcrumb />\n            </div>\n            <div className=\"item-categories-content\">\n                {\n                    data.allSubCategoriesWithItem.map(ele => {\n                        return <ListView\n                            itemIds={ele.itemIds}\n                            category={ele.subCategory}\n                        />\n                    })\n                }\n            </div>\n        </div >\n    );\n}","/home/divum/prahlad-projects/learning/project/shopping-site-client-v2/src/pages/Bye.tsx",["188"],"/home/divum/prahlad-projects/learning/project/shopping-site-client-v2/src/components/CartItemView/CartItemView.tsx",["189"],"import { Card, Col, Row, Modal, Slider, Radio, RadioChangeEvent, Skeleton, message } from 'antd';\nimport React, { useState } from 'react';\nimport { useGetItemDetailsForCartQuery, useAdjustItemQyantityMutation, GetCartDetailsQuery, GetCartDetailsDocument, CartItem, useAdjustItemSizeMutation, useRemoveItemFromCartMutation } from 'src/generated/graphql';\n// import { SettingOutlined, EditOutlined } from '@ant-design/icons';\nimport './index.scss';\n\ninterface CartItemViewProps {\n    itemId: string;\n    quantity: number;\n    size: string;\n    cartId: string;\n}\n\nexport const CartItemView: React.FC<CartItemViewProps> = ({ itemId, quantity, size, cartId }) => {\n    const [visible, setVisible] = React.useState<boolean>(false);\n    const [confirmLoading, setConfirmLoading] = React.useState<boolean>(false);\n    const [modalType, setModalType] = React.useState<string>('');\n    const [selectedSize, setSelectedSize] = React.useState<string>(size);\n    const [selectedQuantity, setSelectedQuantity] = React.useState<number>(quantity);\n    const { data, loading, error } = useGetItemDetailsForCartQuery({ variables: { itemId } });\n    const [addjustItemQuantity] = useAdjustItemQyantityMutation();\n    const [addjustItemSize] = useAdjustItemSizeMutation();\n    const [removeItemFromCart] = useRemoveItemFromCartMutation();\n\n\n    if (data) {\n        console.log(data);\n    }\n    const handleCancel = (e: React.MouseEvent<HTMLElement, MouseEvent>): void => {\n        // setModalType('');\n        if (modalType === 'size') {\n            setSelectedSize(size);\n        }\n        else {\n            setSelectedQuantity(quantity);\n        }\n        setVisible(false);\n    };\n    const showModal = (event: React.MouseEvent<HTMLButtonElement, MouseEvent>, type: string): void => {\n        event.preventDefault();\n        if (type === 'size') {\n            setSelectedSize(size);\n        } else {\n            setSelectedQuantity(quantity);\n        }\n        setModalType(type)\n        setVisible(true);\n    };\n\n    const onClickRemove = (event: React.MouseEvent<HTMLButtonElement, MouseEvent>): void => {\n        event.preventDefault();\n        removeItemFromCart({\n            variables: {\n                cartId,\n                itemId\n            },\n            update: (store, { data }) => {\n                if (data && data.removeItemFromCart) {\n                    let cartData = store.readQuery<GetCartDetailsQuery>({\n                        query: GetCartDetailsDocument\n                    })\n                    if (cartData?.getCartDetails) {\n                        let items = cartData.getCartDetails.items.filter((x) => x.itemId !== data.removeItemFromCart);\n\n                        store.writeQuery<GetCartDetailsQuery>({\n                            query: GetCartDetailsDocument,\n                            data: {\n                                __typename: \"Query\",\n                                getCartDetails: { ...cartData.getCartDetails, items },\n                            }\n                        })\n                    } else {\n                        console.log('unbale to update cart cache')\n                    }\n                }\n            }\n        }).then(res => {\n            if (!res || res.errors || !res.data) {\n                message.error('Unable to remove Item from cart!');\n            }\n            else {\n                message.info('Item Removed!');\n            }\n        })\n    };\n\n    const handleOk = (e: React.MouseEvent<HTMLElement, MouseEvent>): void => {\n        setConfirmLoading(true);\n        if (modalType === 'quantity') {\n            addjustItemQuantity({\n                variables: {\n                    cartId,\n                    itemId,\n                    quantity: selectedQuantity\n                },\n                update: (store, { data }) => {\n                    if (data && data.adjustItemQyantity) {\n                        let cartData = store.readQuery<GetCartDetailsQuery>({\n                            query: GetCartDetailsDocument\n                        })\n                        if (cartData?.getCartDetails) {\n                            let cartDetails = JSON.parse(JSON.stringify(cartData.getCartDetails));\n                            let index: number = cartDetails.items.findIndex((x: CartItem) => x.itemId === itemId);\n                            cartDetails.items[index].quantity = data.adjustItemQyantity;\n                            store.writeQuery<GetCartDetailsQuery>({\n                                query: GetCartDetailsDocument,\n                                data: {\n                                    __typename: \"Query\",\n                                    getCartDetails: { ...cartDetails },\n                                }\n                            })\n                        } else {\n                            console.log('unbale to update cart cache')\n                        }\n                    }\n                }\n            }).then(res => {\n                if (!res || res.errors || !res.data) {\n                    message.error('Unable to adjust quantity');\n                } else {\n                    message.info('quantity updated');\n                }\n                setVisible(false);\n                setConfirmLoading(false);\n            })\n        }\n        else {\n            addjustItemSize({\n                variables: {\n                    cartId,\n                    itemId,\n                    size: selectedSize\n                }\n                ,\n                update: (store, { data }) => {\n                    if (data && data.adjustItemSize) {\n                        let cartData = store.readQuery<GetCartDetailsQuery>({\n                            query: GetCartDetailsDocument\n                        })\n                        if (cartData?.getCartDetails) {\n                            let cartDetails = JSON.parse(JSON.stringify(cartData.getCartDetails));\n                            let index: number = cartDetails.items.findIndex((x: CartItem) => x.itemId === itemId);\n                            cartDetails.items[index].size = data.adjustItemSize;\n                            store.writeQuery<GetCartDetailsQuery>({\n                                query: GetCartDetailsDocument,\n                                data: {\n                                    __typename: \"Query\",\n                                    getCartDetails: { ...cartDetails },\n                                }\n                            })\n                        } else {\n                            console.log('unbale to update cart cache')\n                        }\n                    }\n                }\n            }).then(res => {\n                if (!res || res.errors || !res.data) {\n                    message.error('Unable to adjust size');\n                } else {\n                    message.info('size updated');\n                }\n                setVisible(false);\n                setConfirmLoading(false);\n            })\n\n        }\n    };\n    const onChange = (e: RadioChangeEvent) => {\n        setSelectedSize(e.target.value);\n    }\n\n    const onChangeNumber = (value: number): void => {\n        setSelectedQuantity(value);\n    }\n    if (error) {\n        return <Skeleton />;\n    }\n    if (loading || !data || !data.getItemDetails) {\n        return <Skeleton />\n    }\n\n    const modalTitle: string = modalType === 'size' ? 'Select Size' : 'Select Quantity';\n\n\n    const modalContent: React.ReactNode = modalType === 'size' ?\n        <>\n            <Radio.Group value={selectedSize} onChange={onChange}>\n                {[{ name: 'S', quantity: 20 }, { name: 'M', quantity: 20 }, { name: 'L', quantity: 0 }, { name: 'XL', quantity: 20 }].map((item, index) => {\n                    return <Radio.Button disabled={item.quantity === 0 ? true : false} value={item.name}>{item.name}</Radio.Button>\n                })}\n            </Radio.Group>\n        </>\n        :\n        <div className=\"numberSlider\">\n            <span className=\"numberSlider-left\">\n                1\n            </span>\n            <Slider min={1} max={20} value={selectedQuantity} onChange={onChangeNumber} />\n            <span className=\"numberSlider-right\">\n                20\n            </span>\n        </div>\n        ;\n    const discount = data.getItemDetails.inventory.discount || 0;\n    const priceWithoutDiscount = Math.ceil((data.getItemDetails.inventory.price * (discount + 100)) / 100);\n    return (\n        <Card\n            className=\"cartItem\"\n            style={{ width: '100%', marginTop: 16 }}\n            actions={[\n                <button className=\"cartItem-button\" onClick={onClickRemove} >Remove</button>\n            ]}\n        >\n            <div className=\"cartItem-content\">\n                {/* gutter={24} */}\n                <Row wrap={false}>\n                    {/* xs={{ span: 8, offset: 0 }} sm={{ span: 8, offset: 0 }} md={{ span: 8, offset: 0 }} lg={{ span: 8, offset: 0 }} xl={{ span: 8, offset: 0 }} xxl={{ span: 6, offset: 0 }} */}\n                    <Col flex='none' >\n                        <img alt='sometext' src={data.getItemDetails.images[0]} />\n                    </Col>\n                    {/* xs={{ span: 16, offset: 0 }} sm={{ span: 16, offset: 0 }} md={{ span: 16, offset: 0 }} lg={{ span: 14, offset: 0 }} xl={{ span: 16, offset: 0 }} xxl={{ span: 18, offset: 0 }} */}\n                    <Col flex='auto'>\n                        <div className=\"cartItem-content-item\">\n                            <div className=\"cartItem-content-item-description\">\n                                <h3>\n                                    {data.getItemDetails.brand}\n                                </h3>\n                                <p className=\"cartItem-content-item-description-name\">\n                                    {data.getItemDetails.name}\n                                </p>\n                                <p className=\"cartItem-content-item-description-seller\">\n                                    Men Black Printed Round Neck T-shirt\n                                </p>\n                                <div className=\"cartItem-content-item-description-action\">\n                                    <p>\n                                        <span className=\"cartItem-content-item-description-action-button-title\">\n                                            Quantity :\n                                        </span>\n                                        <button onClick={e => { showModal(e, 'quantity') }}>\n                                            {selectedQuantity}\n                                        </button>\n                                    </p>\n                                    <p className=\"cartItem-content-item-description-action-button\">\n                                        <span className=\"cartItem-content-item-description-action-button-title\">\n                                            Size :\n                                        </span>\n                                        <button onClick={e => { showModal(e, 'size') }}>\n                                            {selectedSize}\n                                        </button>\n                                    </p>\n                                </div>\n                            </div>\n                            <div className=\"cartItem-content-item-price\">\n                                <h3 className=\"cartItem-content-item-price-amount\">\n                                    &#8377; {data.getItemDetails.inventory.price}\n                                </h3>\n                                <p className=\"cartItem-content-item-price-discount\">\n                                    <span className=\"cartItem-content-item-price-discount-line\">\n                                        <span>&#8377; {priceWithoutDiscount}</span>\n                                    </span>\n                                    <span className=\"cartItem-content-item-price-discount-value\">\n                                        ~{discount}% OFF\n                                    </span>\n                                </p>\n                            </div>\n                        </div>\n                    </Col>\n                </Row>\n            </div>\n            <Modal\n                centered\n                title={modalTitle}\n                visible={visible}\n                onOk={handleOk}\n                confirmLoading={confirmLoading}\n                onCancel={handleCancel}\n            >\n                {modalContent}\n            </Modal>\n        </Card>\n    )\n}\n",{"ruleId":"190","severity":1,"message":"191","line":1,"column":17,"nodeType":"192","messageId":"193","endLine":1,"endColumn":26},{"ruleId":"194","severity":1,"message":"195","line":155,"column":33,"nodeType":"196","endLine":155,"endColumn":100},{"ruleId":"194","severity":1,"message":"195","line":162,"column":33,"nodeType":"196","endLine":162,"endColumn":100},{"ruleId":"194","severity":1,"message":"195","line":169,"column":33,"nodeType":"196","endLine":169,"endColumn":100},{"ruleId":"190","severity":1,"message":"197","line":1,"column":88,"nodeType":"192","messageId":"193","endLine":1,"endColumn":92},{"ruleId":"198","severity":1,"message":"199","line":49,"column":59,"nodeType":"200","messageId":"201","endLine":49,"endColumn":62},{"ruleId":"190","severity":1,"message":"202","line":50,"column":24,"nodeType":"192","messageId":"193","endLine":50,"endColumn":37},{"ruleId":"190","severity":1,"message":"203","line":71,"column":11,"nodeType":"192","messageId":"193","endLine":71,"endColumn":21},{"ruleId":"204","replacedBy":"205"},{"ruleId":"206","replacedBy":"207"},{"ruleId":"190","severity":1,"message":"191","line":1,"column":17,"nodeType":"192","messageId":"193","endLine":1,"endColumn":26},{"ruleId":"190","severity":1,"message":"208","line":2,"column":36,"nodeType":"192","messageId":"193","endLine":2,"endColumn":43},{"ruleId":"204","replacedBy":"209"},{"ruleId":"206","replacedBy":"210"},{"ruleId":"204","replacedBy":"211"},{"ruleId":"206","replacedBy":"212"},{"ruleId":"198","severity":1,"message":"199","line":19,"column":59,"nodeType":"200","messageId":"201","endLine":19,"endColumn":62},{"ruleId":"204","replacedBy":"213"},{"ruleId":"206","replacedBy":"214"},{"ruleId":"204","replacedBy":"215"},{"ruleId":"206","replacedBy":"216"},{"ruleId":"190","severity":1,"message":"217","line":3,"column":25,"nodeType":"192","messageId":"193","endLine":3,"endColumn":32},{"ruleId":"190","severity":1,"message":"218","line":11,"column":7,"nodeType":"192","messageId":"193","endLine":11,"endColumn":15},{"ruleId":"204","replacedBy":"219"},{"ruleId":"206","replacedBy":"220"},{"ruleId":"204","replacedBy":"221"},{"ruleId":"206","replacedBy":"222"},{"ruleId":"223","severity":1,"message":"224","line":22,"column":8,"nodeType":"225","endLine":22,"endColumn":10,"suggestions":"226"},{"ruleId":"198","severity":1,"message":"199","line":10,"column":43,"nodeType":"200","messageId":"201","endLine":10,"endColumn":46},{"ruleId":"190","severity":1,"message":"191","line":1,"column":17,"nodeType":"192","messageId":"193","endLine":1,"endColumn":26},{"ruleId":"190","severity":1,"message":"227","line":1,"column":28,"nodeType":"192","messageId":"193","endLine":1,"endColumn":36},{"ruleId":"198","severity":1,"message":"199","line":11,"column":45,"nodeType":"200","messageId":"201","endLine":11,"endColumn":48},{"ruleId":"190","severity":1,"message":"228","line":12,"column":19,"nodeType":"192","messageId":"193","endLine":12,"endColumn":22},{"ruleId":"190","severity":1,"message":"227","line":1,"column":28,"nodeType":"192","messageId":"193","endLine":1,"endColumn":36},{"ruleId":"223","severity":1,"message":"224","line":27,"column":8,"nodeType":"225","endLine":27,"endColumn":10,"suggestions":"229"},{"ruleId":"190","severity":1,"message":"217","line":1,"column":10,"nodeType":"192","messageId":"193","endLine":1,"endColumn":17},{"ruleId":"198","severity":1,"message":"199","line":13,"column":49,"nodeType":"200","messageId":"201","endLine":13,"endColumn":52},{"ruleId":"198","severity":1,"message":"199","line":8,"column":41,"nodeType":"200","messageId":"201","endLine":8,"endColumn":44},{"ruleId":"190","severity":1,"message":"227","line":2,"column":17,"nodeType":"192","messageId":"193","endLine":2,"endColumn":25},"@typescript-eslint/no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'Card' is defined but never used.","no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","unexpected","'setIsFetching' is assigned a value but never used.","'id' is assigned a value but never used.","no-native-reassign",["230"],"no-negated-in-lhs",["231"],"'message' is defined but never used.",["230"],["231"],["230"],["231"],["230"],["231"],["230"],["231"],"'Divider' is defined but never used.","'tempData' is assigned a value but never used.",["230"],["231"],["230"],["231"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.","ArrayExpression",["232"],"'useState' is defined but never used.","'url' is assigned a value but never used.",["233"],"no-global-assign","no-unsafe-negation",{"desc":"234","fix":"235"},{"desc":"234","fix":"236"},"Update the dependencies array to be: [history]",{"range":"237","text":"238"},{"range":"239","text":"238"},[746,748],"[history]",[891,893]]